- name: Check if server needs to be rebooted
  stat:
    path: "{{ reboot_required_path }}"
  register: reboot_required

- block:

    - debug:
        msg: 'This server is being rebooted'
  
    - name: set osd flags
      command: ceph --cluster {{ cluster }} osd set {{ item }}
      with_items:
        - noout
      delegate_to: "{{ groups[mon_group_name][0] }}"
  
    - name: Reboot the server.
      reboot:
        pre_reboot_delay: 60
        reboot_timeout: 1200
  
    - name: Pause 3 minutes for ceph reboot to begin
      pause:
        minutes: 3

    - name: get num_pgs - non container
      command: "{{ docker_exec_cmd_update_osd|default('') }} ceph --cluster {{ cluster }} -s --format json"
      register: ceph_pgs
      delegate_to: "{{ groups[mon_group_name][0] }}"
  
    - name: waiting for clean pgs...
      command: "{{ docker_exec_cmd_update_osd|default('') }} ceph --cluster {{ cluster }} -s --format json"
      register: ceph_health_post
      until: >
        (((ceph_health_post.stdout | from_json).pgmap.pgs_by_state | length) > 0)
        and
        (((ceph_health_post.stdout | from_json).pgmap.pgs_by_state | selectattr('state_name', 'search', '^active\\+clean') | map(attribute='count') | list | sum) == (ceph_pgs.stdout | from_json).pgmap.num_pgs)
      delegate_to: "{{ groups[mon_group_name][0] }}"
      retries: "{{ health_osd_check_retries }}"
      delay: "{{ health_osd_check_delay }}"
      when:
        - (ceph_pgs.stdout | from_json).pgmap.num_pgs != 0

    - name: waiting for all mons online...
      command: "{{ docker_exec_cmd_update_osd|default('') }} ceph --cluster {{ cluster }} -s --format json"
      register: ceph_health_post
      until: >
        ((ceph_health_post.stdout | from_json).health.checks.MON_DOWN is not defined)
      delegate_to: "{{ groups[mon_group_name][0] }}"
      retries: "{{ health_osd_check_retries }}"
      delay: "{{ health_osd_check_delay }}"

    - name: set osd flags
      command: ceph --cluster {{ cluster }} osd unset {{ item }}
      with_items:
        - noout
      delegate_to: "{{ groups[mon_group_name][0] }}"
  
  when: reboot_required.stat.exists == True
